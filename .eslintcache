[{"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/reportWebVitals.js":"1","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/App.js":"2","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/CreateCoupon.js":"3","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Main.js":"4","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/ViewCoupon.js":"5","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Faucet.js":"6","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Loading.js":"7","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Claim.js":"8","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/time.js":"9","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/BuyTicket.js":"10","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/index.js":"11","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/history.js":"12","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/AlertModal.js":"13","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/init.js":"14","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/config.js":"15","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/SuccessModal.js":"16"},{"size":362,"mtime":1607607870719,"results":"17","hashOfConfig":"18"},{"size":1135,"mtime":1608207730574,"results":"19","hashOfConfig":"18"},{"size":15386,"mtime":1608207769567,"results":"20","hashOfConfig":"18"},{"size":4381,"mtime":1608208153407,"results":"21","hashOfConfig":"18"},{"size":19397,"mtime":1608207891416,"results":"22","hashOfConfig":"18"},{"size":4437,"mtime":1608138286821,"results":"23","hashOfConfig":"18"},{"size":382,"mtime":1608137664583,"results":"24","hashOfConfig":"18"},{"size":5047,"mtime":1608207828749,"results":"25","hashOfConfig":"18"},{"size":865,"mtime":1608136307540,"results":"26","hashOfConfig":"18"},{"size":6484,"mtime":1608207756253,"results":"27","hashOfConfig":"18"},{"size":500,"mtime":1607607870718,"results":"28","hashOfConfig":"18"},{"size":93,"mtime":1608138428774,"results":"29","hashOfConfig":"18"},{"size":534,"mtime":1608046396480,"results":"30","hashOfConfig":"18"},{"size":1057,"mtime":1608136292472,"results":"31","hashOfConfig":"18"},{"size":32,"mtime":1608136325133,"results":"32","hashOfConfig":"18"},{"size":643,"mtime":1608137741194,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9udkpo",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/reportWebVitals.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/App.js",[],["72","73"],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/CreateCoupon.js",["74"],"import React, { useEffect, useState } from \"react\";\nimport ipfsClient from \"ipfs-http-client\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport history from \"./history\";\nimport {\n    Row,\n    Col,\n    Form,\n    Card,\n    Image,\n    Button,\n    CardDeck,\n    Dropdown,\n    DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreateCoupon() {\n    const [deploying, setDeploying] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [addCouponState, setAddCouponState] = useState({\n        couponTokenName: \"\",\n        couponTokenSymbol: \"\",\n        ticketPrice: \"\",\n        distInterval: \"\",\n        ticketBuyDuration: \"\",\n        ticketBuyToken: \"\",\n        image: null,\n    });\n\n    const [showMetamaskError, setShowMetamaskError] = useState(\n        false\n    );\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [tokens] = useState([\n        { name: \"DAI\", address: \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\" },\n        { name: \"USDC\", address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\" }\n    ]);\n\n    const ipfs = ipfsClient({\n        host: 'ipfs.infura.io',\n        port: 5001,\n        protocol: 'https',\n    });\n\n    const handleCreateCoupon = async () => {\n        let tokenBaseUrl = \"\";\n        if (addCouponState.image) {\n            setDeploying(true);\n            const ipfsHash = await deployImage();\n            tokenBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setDeploying(false);\n        }\n\n        window.couponFactory.methods\n            .addDistCoupon(\n                addCouponState.couponTokenName,\n                addCouponState.couponTokenSymbol,\n                addCouponState.ticketBuyToken,\n                addCouponState.ticketPrice,\n                addCouponState.distInterval,\n                addCouponState.ticketBuyDuration,\n                tokenBaseUrl,\n            )\n            .send()\n            .on('transactionHash', () => {\n                setProcessing(true);\n            })\n            .on('receipt', (_) => {\n                setProcessing(false);\n                setSuccessModal({\n                    open: true,\n                    msg: \"Coupon successfully created !!\",\n                });\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n                console.log(error.message)\n            });\n    };\n\n    const deployImage = () => {\n        return new Promise((resolve) => {\n            const reader = new window.FileReader()\n            reader.readAsArrayBuffer(addCouponState.image);\n\n            reader.onloadend = async () => {\n                const files = [{\n                    path: addCouponState.image.name,\n                    content: reader.result\n                }];\n\n                for await (const result of ipfs.addAll(files)) {\n                    resolve(result.cid.string);\n                }\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.selectedAddress\n        ) {\n            setShowMetamaskError(true);\n        }\n    }, []);\n\n    return (\n        <div style={{ marginTop: \"5%\" }}>\n            {showMetamaskError ?\n                <AlertModal\n                    open={showMetamaskError}\n                    toggle={() => {\n                        setShowMetamaskError(false);\n                        history.push('/');\n                    }}\n                >\n                    <div>\n                        {typeof window.ethereum === 'undefined' ?\n                            <div>\n                                You should install Metamask first.                                \n                            </div>\n                            :\n                            <div>\n                                Please connect to Metamask.\n                            </div>\n                        }\n                    </div>\n                </AlertModal>\n                :\n                <CardDeck>\n                    <Card className=\"hidden-card\"></Card>\n\n                    <Card className=\"mx-auto create-card\">\n                        <Card.Header>\n                            <u>Create Distribution Coupon</u>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <Row style={{ marginTop: \"10px\" }}>\n                                <Col className=\"text-header\">\n                                    Coupon Token Name:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"text\"\n                                        placeholder=\"NFT Token Name\"\n                                        onChange={(e) => setAddCouponState({\n                                            ...addCouponState,\n                                            couponTokenName: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addCoupontate.couponTokenName}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Coupon Token Symbol:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"text\"\n                                        placeholder=\"NFT Token Symbol\"\n                                        onChange={(e) => setAddCouponState({\n                                            ...addCouponState,\n                                            couponTokenSymbol: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addCouponState.couponTokenSymbol}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Ticket Price:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"Price of the ticket\"\n                                        onChange={(e) => setAddCouponState({\n                                            ...addCouponState,\n                                            ticketPrice: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addCouponState.ticketPrice}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Every Distribution Interval:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"In minutes (Eg. 15)\"\n                                        onChange={(e) => setAddCouponState({\n                                            ...addCouponState,\n                                            distInterval: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addCouponState.distInterval}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Buy Duration:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"In minutes (Eg. 30)\"\n                                        onChange={(e) => setAddCouponState({\n                                            ...addCouponState,\n                                            tokenBuyDuration: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addCouponState.tokenBuyDuration}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginBottom: \"30px\" }}>\n                                <Col className=\"text-header\">\n                                    Token For Buy:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <DropdownButton\n                                        style={{\n                                            position: \"absolute\",\n                                        }}\n                                        title={tokens.map((element) => (\n                                            addCouponState.ticketBuyToken === element.address ?\n                                                element.name\n                                                : null\n                                        ))}\n                                        variant=\"outline-info\"\n                                        onSelect={(event) => setAddCouponState({\n                                            ...addCouponState,\n                                            ticketBuyToken: event\n                                        })}\n                                    >\n                                        {tokens.map((element, key) => (\n                                            <Dropdown.Item\n                                                key={key}\n                                                eventKey={element.address}\n                                            >\n                                                {element.name}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </DropdownButton>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    NFT Token Image:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"file\"\n                                        onChange={(event) => setAddCouponState({\n                                            ...addCouponState,\n                                            image: event.target.files[0]\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            {addCouponState.image ?\n                                <Row>\n                                    <Col>\n                                        <Image\n                                            src={URL.createObjectURL(\n                                                addCouponState.image\n                                            )}\n                                            width=\"150\"\n                                            height=\"150\">\n                                        </Image>\n                                    </Col>\n                                </Row>\n                                : null\n                            }\n                        </Card.Body>\n\n                        <Card.Footer className=\"text-center\">\n                            <Button\n                                onClick={handleCreateCoupon}\n                                variant=\"outline-success\"\n                            >\n                                {deploying ?\n                                    <div className=\"d-flex align-items-center\">\n                                        <span>Deploying to IPFS</span>\n                                        \n                                        <span className=\"loading ml-2\"></span>\n                                    </div>\n                                    :\n                                    (processing ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Processing\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        <div>Submit</div>\n                                    )\n                                }\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n\n                    <Card className=\"hidden-card\"></Card>\n                </CardDeck>\n            }\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={() => history.push(\"/\")}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div>\n    );\n}\n","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Main.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/ViewCoupon.js",["75"],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Faucet.js",["76"],"import React, { useEffect, useState } from \"react\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { Button, Card, CardDeck } from \"react-bootstrap\";\n\nexport default function Faucet() {\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [tokens] = useState([\n    {\n      name: \"DAI\",\n      address: \"\",\n      status: false\n    }, {\n      name: \"USDC\",\n      address: \"\",\n      status: false\n    }\n  ]);\n\n  const handleGetTestTokens = (tokenAddress) => {\n    window.faucet.methods\n      .claimTestTokens(tokenAddress)\n      .send()\n      .on('transactionHash', () => {\n        setProcessing(true);\n      })\n      .on('receipt', (_) => {\n        setProcessing(false);\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  }\n\n  const checkIsAlreadyClaimed = () => {\n    tokens.forEach(async (token, i) => {\n      const status = await window.faucet\n        .methods.alreadyClaimed(\n          window.userAddress,\n          token.address,\n        ).call();\n\n      tokens[i].status = status;\n\n      if (i === tokens.length - 1) {\n        setLoading(false);\n      }\n    });\n  }\n\n  useEffect(() => {\n    checkIsAlreadyClaimed();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nif (loading) {\n  return <Loading />\n};\n\nreturn (\n  <div>\n    <CardDeck>\n      <Card className=\"hidden-card\"></Card>\n        <Card className=\"view-pool-card\">\n          <Card.Header>\n            <u>Token Faucet</u>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"30px\" }}>\n              <strong>If you want to get token</strong>\n                <br />Please use <a\n                    target=\"_blank\"                    \n                    href=\"https://testnet.binance.org/faucet-smart\"\n                    style={{ fontWeight: \"bold\" }}\n                > Faucet </a>                \n            </div>\n\n            {tokens.map((token, key) => (\n              <Card\n                key={key}\n                className=\"mx-auto form-card text-center\"\n                style={{\n                    backgroundColor: \"rgb(253, 255, 255)\",\n                    marginTop: \"4%\",\n                    marginBottom: \"4%\"\n                }}>\n                <Card.Header>\n                  <u>{token.name} Faucet</u>\n                </Card.Header>\n\n                {!token.status ?\n                  <Card.Body>\n                    <p>\n                      You can get Test <strong>{token.name} </strong>\n                    </p>\n                    <Button\n                      style={{ marginTop: '10px' }}\n                      variant=\"success\"\n                      onClick={() =>\n                        handleGetTestTokens(token.address)\n                      }\n                    >\n                    {processing ?\n                      <div className=\"d-flex align-items-center\">\n                        Processing\n                        <span className=\"loading ml-2\"></span>\n                      </div>\n                        :\n                      <div>\n                        GET 100 {token.name}\n                      </div>\n                    }\n                    </Button>\n                  </Card.Body>\n                  :\n                  <Card.Body>\n                    <p style={{ color: \"gray\" }}>\n                      You have already claimed your 100 {token.name}.\n                    </p>                    \n                  </Card.Body>\n                  }\n                </Card>\n              ))}\n            </Card.Body>\n          </Card>\n\n          <Card className=\"hidden-card\"></Card>\n        </CardDeck>\n\n\n        <AlertModal\n          open={errorModal.open}\n          toggle={() => setErrorModal({\n            ...errorModal, open: false\n          })}\n        >\n          {errorModal.msg}\n        </AlertModal>\n\n        <SuccessModal\n          open={successModal.open}\n          toggle={() => setSuccessModal({\n            ...successModal, open: false\n          })}\n        >\n          {successModal.msg}\n        </SuccessModal>\n      </div >\n  );\n}\n","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Loading.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/Claim.js",["77"],"import React, { useState } from \"react\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function Claim({\n    couponAddress,\n    contractInstance,\n    ticketNumber,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleClaimCoupon = async () => {\n        try {\n            const address = await contractInstance.methods\n                .getApproved(\n                    ticketNumber\n                ).call();\n\n            if (address === couponAddress) {\n                claimCoupon();\n            } else {\n                const success = await approveToken();\n                if (success) {\n                    claimCoupon();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const claimCoupon = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.claimPrize\n                (\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setProcessing(true);\n                })\n                .on(\"receipt\", () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg:  \"You successfully claimed your coupon !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    };\n\n    const approveToken = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.approve\n                (\n                    poolAddress,\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setApproving(true);\n                })\n                .on(\"receipt\", () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                });\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Claim Coupon</u>\n                </Card.Header>\n\n                <Card.Body>\n                    <div>\n                        <div className=\"info-message\">                                                        \n                            Please click below button to claim your coupon.<br />\n                        </div>\n\n                        <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n                            <Col>\n                                <Button variant=\"success\" onClick={handleClaimCoupon}>\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                </Card.Body>\n\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n",["78","79"],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/time.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/BuyTicket.js",["80"],"import React, { useState } from \"react\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { precision } from \"../web3/precision\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function BuyTicket({\n    couponAddress,\n    contractInstance,\n    erc20Instance,\n    buyToken,\n    availableBalance,\n    balanceNeeded,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleParticipate = async () => {\n        try {\n            const decimals = Number(\n                await erc20Instance.methods.decimals()\n                    .call()\n            );\n\n            console.log(decimals)\n\n            const allowance = await precision.remove(\n                await erc20Instance.methods.allowance(\n                    window.userAddress,\n                    couponAddress,\n                ).call(),\n                decimals,\n            );\n\n            if (Number(allowance) >= Number(balanceNeeded)) {\n                participate();\n            } else {\n                const success = await approveToken(\n                    allowance,\n                    decimals,\n                );\n\n                if (success) {\n                    participate();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const participate = () => {\n        return new Promise((resolve, reject) => {\n            contractInstance.methods.buyTicket()\n                .send()\n                .on('transactionHash', () => {\n                    setProcessing(true);\n                })\n                .on('receipt', () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg: \"Congratulations 🎉 !! \" +\n                            \"You successfully bought ticket !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    }\n\n    const approveToken = (allowance, decimals) => {\n        return new Promise(async (resolve, reject) => {\n            erc20Instance.methods.approve\n                (\n                    poolAddress,\n                    await precision.add(\n                        Number(balanceNeeded) - Number(allowance),\n                        decimals,\n                    )\n                )\n                .send()\n                .on('transactionHash', () => {\n                    setApproving(true);\n                })\n                .on('receipt', () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                })\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Buy Ticket</u>\n                </Card.Header>\n\n                {Number(availableBalance) >= Number(balanceNeeded) ?\n                    <Card.Body>\n                        <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                            <Col>\n                                <u>Available Balance</u>\n                                <span> : </span>\n                                <span>{availableBalance} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\" style={{ paddingBottom: \"30px\" }}>\n                            <Col>\n                                <u>Balance Needed</u>\n                                <span> : </span>\n                                <span>{balanceNeeded} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\">\n                            <Col>\n                                <Button\n                                    onClick={handleParticipate}\n                                    variant=\"outline-success\"\n                                >\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                    :\n                    <Card.Body>\n                        <div className=\"alert-message\">\n                          You don't have available balance.\n                        </div>\n                    </Card.Body>\n                }\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/index.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/history.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/AlertModal.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/init.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/web3/config.js",[],"/Users/willpark/Desktop/hackathon/binance_hack_2020/bsc-coupon/src/components/SuccessModal.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":2,"message":"86","line":165,"column":48,"nodeType":"87","messageId":"88","endLine":165,"endColumn":61},{"ruleId":"89","severity":1,"message":"90","line":15,"column":5,"nodeType":"87","messageId":"91","endLine":15,"endColumn":10},{"ruleId":"92","severity":1,"message":"93","line":88,"column":21,"nodeType":"94","endLine":88,"endColumn":36},{"ruleId":"85","severity":2,"message":"95","line":74,"column":21,"nodeType":"87","messageId":"88","endLine":74,"endColumn":32},{"ruleId":"81","replacedBy":"96"},{"ruleId":"83","replacedBy":"97"},{"ruleId":"85","severity":2,"message":"95","line":90,"column":21,"nodeType":"87","messageId":"88","endLine":90,"endColumn":32},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-undef","'addCoupontate' is not defined.","Identifier","undef","no-unused-vars","'Image' is defined but never used.","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'poolAddress' is not defined.",["98"],["99"],"no-global-assign","no-unsafe-negation"]